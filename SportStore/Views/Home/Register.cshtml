@model SportStore.ViewModels.NewUserViewModel

@{
    ViewData["Title"] = "Registeration Page";
}

<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDasA7_C8s-T2dAXutOSqVBiCAsz3zJ3zo">
</script>
<script>
    function getLocation() {
        var geocoder = new google.maps.Geocoder();
        var address = document.getElementById("Address").value;

        return new Promise((resolve, reject) => {
            geocoder.geocode({ 'address': address }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    //document.getElementById('AddressX').value = results[0].geometry.location.lat();
                    //document.getElementById('AddressY').value = results[0].geometry.location.lng();
                    $("#AddressX").val(results[0].geometry.location.lat());
                    $("#AddressY").val(results[0].geometry.location.lng());
                    resolve();
                } else {
                    reject('not found');
                }
            });
        });
    }


    function kaki(e) {
        e.preventDefault();

        return getLocation().then(function () {
            $.ajax({
                url: "/Home/Register",
                method: 'POST',
                data: $('#form').serializeArray(),
                error: function () { alert('השמירה נכשלה') }
            })
        }).then(() => e.returnValue = true);
    }
</script>

 @using (Html.BeginForm("Register", "Home", FormMethod.Post, new { id="form", onsubmit = "kaki(event)" }))
 {
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h1 class="display-4">הרשמה</h1>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.IdNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IdNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IdNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", Type = "password" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } } )
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>
        @Html.HiddenFor(model => model.AddressX)
        @Html.HiddenFor(model => model.AddressY)
        <div class="form-group">
            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Type, Html.GetEnumSelectList<SportStore.ViewModels.UserType>(), htmlAttributes: new { @class = "form-control" }))
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </div>
        <div>
            @if (@ViewBag.Error != null)
            {
                <label> @ViewBag.Error</label>
            }
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button oclick="kaki">הרשמה</button>
            </div>
        </div>
    </div>
}