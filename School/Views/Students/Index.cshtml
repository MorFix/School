@model IEnumerable<School.Entities.Student>
@inject IJsonHelper Json;

@{
    ViewData["Title"] = "התנהגות";
}

<script>
    function getMaxCount(studentsCountByBehavior) {
        let max = 0;

        Object.keys(studentsCountByBehavior).forEach(behavior => {
            max = studentsCountByBehavior[behavior] > max ? studentsCountByBehavior[behavior] : max;
        });

        return max + (10 - (max % 10));
    };

    function drawSvg(studentsCountByBehavior) {
        d3.selectAll("svg").remove();

        // set the dimensions and margins of the graph
        const margin = { top: 30, right: 30, bottom: 30, left: 60 },
            width = 600 - margin.left - margin.right,
            height = 520 - margin.top - margin.bottom;

        // append the svg object
        const svg = d3.select("#studentsByBehaviorChart")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        // Add Y axis
        var y = d3.scaleLinear()
            .domain([0, getMaxCount(studentsCountByBehavior)])
            .rangeRound([height, 0]);
        svg.append("g").call(d3.axisLeft(y))
            .selectAll("text")
            .attr("transform", "translate(-12, 0)")
            .attr("font-size", "14px");


        // X axis
        var x = d3.scaleBand()
            .range([0, width])
            .domain(Object.keys(studentsCountByBehavior))
            .padding(0.5);
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x))
            .selectAll("text")
            .attr("font-size", "14px");

        // Bars
        svg.selectAll("mybar")
            .data(Object.keys(studentsCountByBehavior))
            .enter()
            .append("rect")
            .attr("x", function(b) { return x(b); })
            .attr("y", function(b) { return y(studentsCountByBehavior[b]); })
            .attr("width", x.bandwidth())
            .attr("height", function(b) { return height - y(studentsCountByBehavior[b]); })
            .attr("fill", "#3c96cf");
    }

    function updateChart() {
        $.get("/students/studentsByBehavior",
            data => {
                drawSvg(data);
            });
    };

    $(document).ready(function () { updateChart() });

    function saveBehavior(student) {
        const value = document.getElementById(`behavior-student-${student}`).value;

        $.ajax({
            url: `/students/?student=${student}&behavior=${value}`,
            method: 'PUT',
            success: function() {
                updateChart();
                alert('השמירה בוצעה')
            },
            error: function() { alert('השמירה נכשלה') }
        });
    }
</script>


<h1 class="text-center m-2">גיליון התנהגות</h1>
<div class="container d-flex p-4 overflow-hidden">
    <div class="flex-grow-1 h-100 mh-100 overflow-auto">
        <table class="table table-bordered center-table">
            <thead class="table-light">
            <tr>
                <td class="d-sm-table-cell">שם</td>
                <td>התנהגות</td>
            </tr>
            </thead>
            <tbody>
            @foreach (var student in Model.OrderBy(x => x.LastName))
            {
                <tr>
                    <td class="">@student.FullName</td>
                    <td>
                        <select id="behavior-student-@student.IdNumber" class="form-control" asp-items="student.Behavior.ToSelectList()"></select>
                        <a href="#" onclick="saveBehavior(@student.IdNumber)">שמור‎</a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
    <div class="d-flex flex-row justify-content-center">
        <div id="studentsByBehaviorChart"></div>
    </div>
</div>